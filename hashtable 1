#include<iostream>
#include<string.h>
using namespace std;
class HashFunction
{
struct hash
{
  long key;
  char name[10];

}hash;

hash h[10];

public:
 HashFunction();
 void insert();
 void display();
 int find(long);
 void Delete(long);
};
HashFunction::HashFunction();
{
  int i
  for(i=0;i<=10;i++)
  {
    h[i].key=-1;
    strcpy(h[i].name,"NULL");

  }

}
void HashFunction::Delete(long k)
{
  int index=find(k);
  if(index==-1)
  {
    cout<<"\n\tKey Not Found";
  }
  else{
    h[index].key=-1;
    strcpy(h[index].name,"NULL");
    cout<<"\n\tKey is Deleted";

  }
}
int HashFunction::find(long k)
{
  int i;
  for(i=0;i<10;i++)
  {
    if(h[i].key==k)
    {
      cout<<"\n\t"<<h[i].key<<"is Found at"<<i<<"Location with name"<<h[i].name;
      return i;
    } 
  }
  if(i==10)
  {
    return -1;
  }
}
void HashFunction::display()
{
  int i;
  cout<<"\n\t\tKey\t\tName"
  for(i=0;i<10;i++)
  {
    cout<<"\n\th["<<i<<"]\t"<<h[i].key<<"\t\t"<<<h[i].name;
  }
}
void HashFunction::insert()
{
char ans,n[10],ntemp[10];
long k,temp;
int v,hi,cnt=0,flag=0,i;
do
{
  if(cnt>=10)
  {
    cout<<"\n\tHashTable is FULL";
    break;
  }
  cout<<"Enter a Telephone no: ";
  cin>>k;
  cout<<"\n\tEnter a Client name: ";
  cin>>n;
  hi=k%10;
  if(h[hi].key==-1)
  {
    h[hi].key=k;
    strcpy(h[hi].name,n);
  }
else{
  if(h[hi].key%10!=hi)
  {
    temp=h[hi].key;
    strcpy[ntemp,h[hi].name];
    h[hi].key=k;
     strcpy[h[hi].name,n];
     for(i=hi+1;i<10;i++)
      {
        if(h[hi].key==-1)
        {
          h[i].key=temp;
          strcpy(h[hi].name,ntemp);
          flag=1;
          break;
        }
      }
  }
}
}


}
